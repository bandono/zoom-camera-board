#!/bin/bash
# version: 3.1
# For use with the direct camera RS232 connection without additional control board 
#
# require root privilege
# usage: sudo ./ptz-server <start | stop | check>
#
# 1. Read `vars` file inside $scriptBin (inside /usr/local/ipcam/bin)
# 2. Set Visca serial port to what was found in the above step
# 3. Stop the `ttyVisca` normally in use for system console 
# 4. Start the `server.py` to listen `listenPort` and use the Visca serial port `ttyVisca`
# 5. Log necessary status to syslog logger
# 6. If called by i.e. cron using `sudo ./ptz-server check`, it will restart server if `ttyVisca` is in `start` status

scriptDir="/usr/local/ipcam"
scriptBin=$scriptDir/bin
tempDir=$scriptDir/tmp
varsFile=$scriptBin/vars
pidFile="$tempDir/run-ptzserver.pid"

listenPort=3789
ttyVisca=`grep ttyVisca $varsFile | awk -F'=' '{print $2}'`
tty=`echo $ttyVisca | awk -F '/' '{print $3}'`

close_console() {
	serialStatus=`/sbin/status $tty | awk '{print $2}' | grep start | wc -l`
	if [ $serialStatus -gt 0 ]; then
		echo "[server.py]: Serial port $tty Status is start/running. Stopping the port"
		logger "Serial port $tty Status is start/running. Stopping the port" -t "[server.py]"
		/sbin/stop $tty
	fi
}

start_console() {
	serialStatus=`/sbin/status $tty | awk '{print $2}' | grep stop | wc -l`
	if [ $serialStatus -gt 0 ]; then
		echo "[server.py]: Serial port $tty Status is stop/waiting. Starting the port"
		logger "Serial port $tty Status is stop/waiting. Starting the port" -t "[server.py]"	
		/sbin/start $tty
	fi
}

check_console() {
	serialStatus=`/sbin/status $tty | awk '{print $2}' | grep start | wc -l`
	if [ $serialStatus -gt 0 ]; then
		echo "[server.py]: Serial port $tty Status is start/running. Stopping the port"
		logger "Serial port $tty Status is start/running. Stopping the port" -t "[server.py]"
		/sbin/stop $tty
		# restarting server
		ptzsrv_down
		sleep 3
		ptzsrv_up
	fi
}

ptzsrv_up() {
	# check existing server.py whether it is already running
	srvStatus=`ps -ef | grep server.py | grep -v grep | awk '{print $2}'`

	if [ "$srvStatus" != ""  ]; then
		echo "[server.py]: server.py is already running at PID $srvStatus"
		logger "server.py is already running at PID $srvStatus" -t "[server.py]"
	else
		# start a new server.py
		if [ -f $pidFile ]; then
			rm $pidFile
		fi	
		$scriptBin/server.py $listenPort $ttyVisca &
		echo $! > $pidFile
		echo "[server.py]: server.py is started"
		logger "server.py is started" -t "[server.py]"
	fi
}

ptzsrv_down() {
	if [ ! -f $pidFile ]; then
		pkill server.py
	else
		kill -9 `cat $pidFile`
	fi
	echo "[server.py]: server.py is stopped"
	logger "server.py is stopped" -t "[server.py]"	
}	

case "$1" in
 
start)
	close_console
	ptzsrv_up
	;;
stop)
	start_console
	ptzsrv_down
	;;
check)
	check_console
	;;	
*)
	echo "Usage: $0 {start|stop|check}"
	;;
esac
exit 0
