#!/bin/bash
# version: 2.1
# For use with additional Arduino control board 
#
# require root privilege
# usage: sudo ./ptz-server <start | stop >
#
# 1. Read `vars` file inside $scriptBin (inside /usr/local/ipcam/bin)
# 2. Set serial port to what was found in the above step


# 3. Log necessary status to syslog logger

scriptDir="/usr/local/ipcam"
scriptBin=$scriptDir/bin
tempDir=$scriptDir/tmp
varsFile=$scriptBin/vars
pidFile="$tempDir/run-ptzserver.pid"

listenPort=3789
ttyArduino=`grep ttyArduino $varsFile | awk -F'=' '{print $2}'`
tty=`echo $ttyArduino | awk -F '/' '{print $3}'`

ptzsrv_up() {
	# check existing server.py whether it is already running
	srvStatus=`ps -ef | grep server.py | grep -v grep | awk '{print $2}'`

	if [ "$srvStatus" != ""  ]; then
		echo "[server.py]: server.py is already running at PID $srvStatus"
		logger "server.py is already running at PID $srvStatus" -t "[server.py]"
	else
		# start a new server.py
		if [ -f $pidFile ]; then
			rm $pidFile
		fi	
		$scriptBin/server.py $listenPort $ttyArduino &
		echo $! > $pidFile
		echo "[server.py]: server.py is started"
		logger "server.py is started" -t "[server.py]"
	fi
}

ptzsrv_down() {
	if [ ! -f $pidFile ]; then
		pkill server.py
	else
		kill -9 `cat $pidFile`
	fi
	echo "[server.py]: server.py is stopped"
	logger "server.py is stopped" -t "[server.py]"	
}	

case "$1" in
 
start)
	ptzsrv_up
	;;
stop)
	ptzsrv_down
	;;	
*)
	echo "Usage: $0 {start|stop}"
	;;
esac
exit 0
