#!/bin/bash
# Requires root privilege as this script needs to put up/down
# or restart network and/or pptp
# version : 2.8
#
# A lock file will be created as `/usr/local/ipcam/tmp/conn-health.lock`
# if the script doesn't finished, this needs manual removal
# or reboot (will be done by `which-tty`)
#
# EMERGENCY OPERATION:
# The health-check will detect whether USB WiFi stick is plugged in
# Using this WiFi (wireless LAN) will put down other network connections
# and set this wireless connection as default route
#
# The above is done by calling another script: `wifi-stick`
#
# It then attempts to create VPN connection via this route
# It modifies DNS to use OpenDNS
#
# NORMAL OPERATION: 
# The camera will use 3G Modem stick by default
# and this script are doing:
# 	1. Check whether USB modem is connected to internet (ISP)
#	2. Check whether USB modem is answering AT command using `check_usb_modem.py`
#	   and then try to connect to ISP via USB modem
#	3. Create VPN to PPTP server once modem is connected
#	4. Log necessary action via logger
#	5. Update date calling `scriptBin/ntpdate start` 
#
# REBOOT:
# 1. this script may reboot system if several VPN attempts are not success
# 2. However reboot is cancelled if WiFi stick is plugged
#
# will try to read `vars` for this settings:
# 1. VPNname
# 2. defaultISP
# 3. wlanGw 

scriptDir="/usr/local/ipcam"
scriptBin=$scriptDir/bin
tempDir=$scriptDir/tmp
tempFile="$tempDir/`date +%H-%M`-ifstatus.tmp"
lockFile="$tempDir/conn-health.lock"
varsFile=$scriptBin/vars
ifPpp=ppp0
ifVpn=ppp1
ifWlan=wlan0
defWlanGw=192.168.1.1

unset stickStatus
unset wlanGw

pppDir="/etc/ppp/peers"
ATchecker=$scriptBin/check_usb_modem.py

wifiRoute() {
	route add default gw $wlanGw dev ${ifWlan}
	# use OpenDNS name servers for DNS configuration
	echo -e "nameserver 208.67.222.222\nnameserver 208.67.220.220" > /etc/resolv.conf
	# try to stop VPN if any, if there isn't, make no noise about it
	poff $VPNname > /dev/null 2>&1
	sleep 4
	echo "[conn-health]: attempting VPN via WiFi"
	logger "attempting VPN via WiFi" -t "[conn-health]"
	pon $VPNname
}

# read pptp VPN name from `vars`
VPNname=`grep VPNname $varsFile | awk -F'=' '{print $2}'`

# check whether another connection health check is running
if [ -f $lockFile ]; then
	echo "[conn-health]: Other connection health check is still running"
	logger "Other connection health check is still running" -t "[conn-health]"
	exit 0
else
	# Creating lockfile
	echo 1 > $lockFile
	echo "[conn-health]: Connection health conn-health.lock is created"
	logger "Connection health conn-health.lock is created" -t "[conn-health]"
	
	# branch to use WiFi and delete other default gateway route
	stickStatus=`$scriptBin/wifi-stick | grep no\ USB\ WiFi\ found`
	if [ "$stickStatus" != "" ]; then
		
		#--------------------
		# look for interface via ifconfig
		# non-exist interface will return "ppp0: error fetching interface information: Device not found"
		ifconfig $ifPpp > $tempFile 2>&1
		pppStatus=`cat $tempFile | head -1 | grep error | wc -l`
		
		# loop while found any single line stating error
		while [ $pppStatus -gt 0 ]; do
			rm $tempFile
			defaultISP=`grep defaultISP $varsFile | awk -F'=' '{print $2}'`
			pppConf="$pppDir/$defaultISP"
			ttyName=`cat $pppConf | grep tty | head -1`
			ttyStatus=`/usr/bin/python $ATchecker $ttyName | grep "OK" | wc -l`
			# if AT command is replied with OK then initiate modem connection
			if [ $ttyStatus -gt 0 ];then
				pppd call $defaultISP
				echo "[conn-health]: Starting pppd $defaultISP"
				logger "Starting pppd $defaultISP" -t "[conn-health]"
				sleep 10
				# get new modem interface status after waiting 10 seconds
				ifconfig $ifPpp > $tempFile 2>&1
				pppStatus=`cat $tempFile | head -1 | grep error | wc -l`
			else
				echo "[conn-health]: AT command failed. Removing lock"
				logger "AT command failed. Removing lock" -t "[conn-health]"
				rm $tempFile
				rm $lockFile
				exit 1
			fi	
		done # successful 3G connection
		rm $tempFile

		ifconfig $ifVpn > $tempFile 2>&1
		# check vpnStatus with `UP` status instead of `error` condition from ifconfig because ppp1 (VPN tunnel)
		# behaves differently from ppp0 (3G modem)
		vpnStatus=`cat $tempFile | grep UP | head -1 | wc -l`		
		# after while loop of connecting to ISP via modem stick, restart pptp-client
		# if any, if there isn't, make no noise about it
		# check first
		if [ $vpnStatus -eq 0 ]; then
			$scriptBin/ntpdate start	#update date via ntpdate assuming the was no succesful VPN previously
			echo "[conn-health]: ntpdate called"
			logger "ntpdate called" -t "[conn-health]"
			poff $VPNname > /dev/null 2>&1
			sleep 4
			pon $VPNname		
			sleep 10
			echo "[conn-health]: initial attempt to connect VPN"
			logger "initial attempt to connect VPN" -t "[conn-health]"
		fi
		
		# check vpn tunnel after 10 seconds (as connection attempt already done once after the above `while` loop)
		# if connection can't be established in one more attempt
		# try four times more before rebooting
		sleep 10
		ifconfig $ifVpn > $tempFile 2>&1
		# check vpnStatus with `UP` status instead of `error` condition from ifconfig because ppp1 (VPN tunnel)
		# behaves differently from ppp0 (3G modem)
		vpnStatus=`cat $tempFile | grep UP | head -1 | wc -l`
		
		vpnCounter=5
		while [ $vpnCounter -gt 0 ] && [ $vpnStatus -eq 0 ]; do
			# try to stop VPN if any, if there isn't, make no noise about it
			poff $VPNname > /dev/null 2>&1
			sleep 4
			pon $VPNname
			
			# update VPN status after 10 seconds
			sleep 10
			ifconfig $ifVpn > $tempFile 2>&1
			vpnStatus=`cat $tempFile | grep UP | head -1 | wc -l`
			# update counter (decrement)
			(( vpnCounter-- ))
			echo "[conn-health]: attempt to connect VPN left: $vpnCounter"
			logger "attempt to connect VPN left: $vpnCounter" -t "[conn-health]"			
		done

		
		# the checking before reboot decision after 10 seconds of wait
		sleep 10
		ifconfig $ifVpn > $tempFile 2>&1
		vpnStatus=`cat $tempFile | grep UP | head -1 | wc -l`
		if [ $vpnStatus -eq 0 ]; then		
			# REBOOT
			rm $tempFile
			rm $lockFile
			reboot
		fi
		#--------------------		
		rm $tempFile		
	else
		
		# read WLAN gateway config from `vars`
		wlanGw=`grep wlanGw $varsFile | awk -F'=' '{print $2}'`
		if [ "$wlanGw" == "" ]; then
			wlanGw=$defWlanGw
		fi

		# put down eth0		
		# change default route
		# change DNS resolver
		
		ifconfig eth0 down
		defGw=`route | grep default | awk '{print $8}'`
		
		if [ "$defGw" == "ppp0" ]; then
			# try to stop VPN if any, if there isn't, make no noise about it
			poff $VPNname > /dev/null 2>&1
			route del default gw 0.0.0.0 dev ppp0
			wifiRoute
		elif [ "$defGw" == "eth0" ]; then
			# try to stop VPN if any, if there isn't, make no noise about it
			poff $VPNname > /dev/null 2>&1		
			route del default gw 0.0.0.0 dev eth0
			wifiRoute
		elif [ "$defGw" == "$ifWlan" ]; then
			echo "[conn-health]: already defaulting to WiFi"
			logger "already defaulting to WiFi" -t "[conn-health]"
		else
			wifiRoute
		fi
	fi
fi
rm $lockFile
echo "[conn-health]: Connection health conn-health.lock is removed"
logger "Connection health conn-health.lock is removed" -t "[conn-health]"
exit 0
